Scalability and Go (TODO)
Bad concurrency, good concurrency, benchmarking (TODO)
15 Mar 2015

Konstantin Shaposhnikov
k.shaposhnikov@gmail.com


* Why concurrent programs?

.image gophers.jpg

######################################
## Example 1


* Example 1: Problem definition

Write a program to calculate average March temperature in Singapore.

Input for the program will be CSV file with the following structure:

.code weather-example.csv


* Solution 1: Lets go concurrent!

.code -numbers avg-temp-concurent/main.go /START_MAIN OMIT/,/END_MAIN OMIT/


* Solution 1: Lets go concurrent! (continued..)

.code -numbers avg-temp-concurent/main.go /START_HL OMIT/,/END_HL OMIT/

#.image concurrency.jpg

* Lets run it

\... on a file with 1 million entries

    wc -l t.csv
    head t.csv

\... and different GOMAXPROCS values

    for i in 1 2 4 8 16 40 ; do
        echo GOMAXPROCS=$i
        time GOMAXPROCS=$i avg-temp-concurent < t.csv
        echo -------
    done

* Hmmmmm

Q: Is it fast?
A: Not really

Q: Does it scale
A: Up to 2 CPUs. Not impressive.

Q: Can we do better?
A: ???


* Lets go single threaded!

.code -numbers avg-temp-single/main.go /START_MAIN OMIT/,/END_MAIN OMIT/

* Running

    time GOMAXPROCS=1 avg-temp-single < t.csv


######################################
## Example 2
